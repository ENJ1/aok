#!/bin/bash -e

## Run this script first upon logging into a new installation

cd /usr/local/aok

## Prevent offline setup from being done again
## Especially useful because wifi and networks are unreliable,
## meaning this script may need to be re-run after a network failure
if [ ! -f '/root/.aok-offline-setup-done.temp' ]; then

## Remove the default alarm (Arch Linux ARM) account.
## This account is only needed if you have to use SSH to login remotely
## for the very first login, which is not applicable here.
## The alarm account does not have mail, so
## silence the mail spool removal error message by using "2> /dev/null"
## and if somehow there is no user, then don't worry about it
userdel -r alarm 2> /dev/null || echo -n

## Fix Caps Lock for the Virtual Console.
## (The real console, without any Window Environment)
##
## These changes do not effect Caps Lock in a Window Environment,
## and do not effect consoles run while in a Window Environment.
##
## If you have a non-US keyboard layout, replace "us" with your keyboard type,
## but do not echo it to vconsole.conf until you are sure it works.
## Using loadkeys is safe for testing. It takes effect immediately,
## but does not apply permanent changes across reboots.
cp /usr/share/kbd/keymaps/i386/qwerty/us.map.gz \
    /usr/share/kbd/keymaps/us-chrome-caps.map.gz
gunzip /usr/share/kbd/keymaps/us-chrome-caps.map.gz
echo "keycode 125 = Caps_Lock" >> /usr/share/kbd/keymaps/us-chrome-caps.map
loadkeys /usr/share/kbd/keymaps/us-chrome-caps.map
echo "KEYMAP=us-chrome-caps" > /etc/vconsole.conf
echo "The Search Key is now Caps Lock"
echo "Caps Lock is OFF"

## Change root password
echo
echo "Enter a new root password"
passwd

## Set the time zone interactively
TIMEZONE=$(tzselect)
ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime

## Standard Arch Linux Recommendation, perhaps not necessary or needed
hwclock --systohc

## Set locale. CURRENTLY NO OPTION TO SET YOUR OWN. EDIT THIS AS DESIRED.
sed -i 's/^#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf

## Configure hostname
read -p 'Enter a valid hostname (or press Enter to use hostname "ok"): ' NEW_HOSTNAME
if [ -z "$NEW_HOSTNAME" ]; then
NEW_HOSTNAME="ok"
fi
echo "hostname: $NEW_HOSTNAME"
echo "${NEW_HOSTNAME}" > /etc/hostname
cat << EOF > /etc/hosts
127.0.0.1	localhost
::1		localhost
127.0.1.1	${NEW_HOSTNAME}.localdomain	${NEW_HOSTNAME}
EOF


## Custom User Account
echo
read -p 'Enter a valid username (or press Enter to create user "a"): ' NEW_USERNAME
if [ -z "$NEW_USERNAME" ]; then
  NEW_USERNAME="a"
fi
echo "username: $NEW_USERNAME"
useradd -m -G wheel -s /bin/bash ${NEW_USERNAME} && {
  echo
  echo "Enter a new password for the account: $NEW_USERNAME"
  passwd $NEW_USERNAME
#  echo "$NEW_USERNAME" > /root/.autologin-user.temp
#  gpasswd -a $NEW_USERNAME autologin
} || echo "$NEW_USERNAME already exists, skipping..."
echo

## Disable systemd-resolved DNS managment because it breaks Wi-Fi hotspot
## landing pages
systemctl disable systemd-resolved
systemctl stop systemd-resolved

## Put a classic resolv.conf file in place, instead of what is now a broken link
rm /etc/resolv.conf
echo "nameserver 1.1.1.1" > /etc/resolv.conf

## INITIALIZE PACKAGE MANAGER
pacman-key --init
pacman-key --populate archlinuxarm

## The following will only help ifdhcpcd-6.11.5 or less is installed.
## Ignore packages incompatible with the 3.8.11 kernel (dhcpcd version 7+)
#sed -i 's/#IgnorePkg.*=/IgnorePkg    = dhcpcd/' /etc/pacman.conf


touch /root/.aok-offline-setup-done.temp

## Run wifi-menu once without checking ping, -o to obfuscate password
wifi-menu -o

## Using the network immediately after wifi-menu doesn't work
## Must wait for at least 6 second. 5 seconds fails.
echo "Waiting 10 seconds for network interface to be ready..."
sleep 10

fi


## This part of the script depends on being online
get_packages () {

echo "Testing connection..."
ping -c 1 archlinuxarm.org || {

  ## wifi-menu has a bug where it won't work if the interface is already up
  ip link set mlan0 down || echo -n

  wifi-menu -o \
  && sleep 10 \
  && echo "Waiting 10 seconds for network interface to be ready..."
}
  
###########################################################################
## UPGRADE AND INSTALL PACKAGES
##
## Sync repo, upgrade, and install packages without hassle
##
## sudo: needed to gain root privilege for users
## unzip: basic utility
## zip: basic utility
## ttf-dejavu: basic font pack
## alsa-utils: needed for auto (pre-config below); to unmute audio and keep unmuted
## xfce4-pulseaudio-plugin: volume control panel applet
## pavucontrol: volume control
## pulseaudio: audio backend
## pulseaudio-alsa: compatibility
## networkmanager: networking backend (enabled below)
## nm-connection-editor: networking editor gui
## network-manager-applet: tray icon
## firefox: needed for landing page redirection for public Wi-Fi Hotspots
## blueman: bluetooth utility and frontend
## mousepad: lightweight text editor and code syntax highlighter made for Xfce
## galculator: common calculator
## gpicview: lightweight image viewer designed for LXDE
## engrampa: easy to use archive manager designed for MATE desktop
## mpv: video player, best performance, minimal ui
## android-file-transfer: needed for transferring files to/from android devices
## xorg-xinput: mouse and trackpad control (needed by script included in extra)
## vboot-utils: cgpt partition flags for chromebooks (used by install script)
## man: manual pages. type "man some-command" to get the manual for it
## mptfs: needed for android-file-transfer

pacman -Syu --noconfirm sudo unzip zip \
ttf-dejavu vboot-utils man gnome alsa-utils pavucontrol pulseaudio pulseaudio-alsa \
firefox blueman mousepad galculator gpicview engrampa mpv android-file-transfer xorg-xinput \
cpupower mtpfs

###########################################################################

}
## Sometimes it might miss some packages, so try a few times
get_packages || get_packages || get_packages || {
  echo
  echo "Can't get packages. Check your Internet connection."
  echo 'When ready, run "setup" again'
  echo
  exit 1
}

## Veyron support (ASUS Chromebook C201, Flip C100P and other makes and models)
## Now that vboot-utils is installed, crossystem will work
if [ $(crossystem fwid | grep -i veyron) ]; then
  pacman -S firmware-veyron
fi

###########################################################################
## AUDIO PRE-CONFIG
##
## DEPENDS ON: alsa-utils
##
## UNMUTE. TO UNMUTE MANUALLY, RUN "alsamixer",
## USE RIGHT ARROW, AND PRESS "m" TO UNMUTE THE FOLLOWING:
## (alsamixer options won't load after pulseaudio is installed)
## (in that case you muse use these amixer commands)
amixer -c 0 set 'Left Headphone Mixer Left DAC1' on || echo -n
amixer -c 0 set 'Right Headphone Mixer Right DAC1' on || echo -n
amixer -c 0 set 'Left Speaker Mixer Left DAC1' on || echo -n
amixer -c 0 set 'Right Speaker Mixer Right DAC1' on || echo -n
## DOES A MICROPHONE NEED TO BE UNMUTED?
##
## SET VOLUME (DEFAULT IS ZERO)
amixer -c 0 set Headphone 70% || echo -n
amixer -c 0 set Speaker 70% || echo -n
##
## PLUGGING-IN/UNPLUGGING HEADPHONES WILL NOT MUTE/UNMUTE THE SPEAKER
## (with pulseaudio you can only run speaker or headphones not both,
## and must manually change between the two)
## THIS MUST BE CONTROLLED MANUALLY BY THE USER
##
## SAVE SETTINGS AFTER UNMUTING HEADPHONES AND SPEAKER
## THIS ALSO CREATES A FILE SO THAT CHANGES ALWAYS PERSIST ACROSS REBOOTS
## SO THIS ONLY NEEDS TO BE RUN ONCE
alsactl store || echo -n
##
## the package "pulseaudio-alsa" installs /etc/asound.conf, which is needed
## at least for the ability to listen to multiple streams at once.
###########################################################################


## Configure sudo: uncomment wheel group, use visudo syntax check
cp /etc/sudoers /root/sudoers2
sed -i 's/^# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/' /root/sudoers2
visudo -c /root/sudoers2 && mv /root/sudoers2 /etc/sudoers

## configure cpupower for efficiency
sed -i "s/#*governor='.*'/governor='schedutil'/" /etc/default/cpupower
systemctl enable cpupower

## Enable WiFi gui autostart because Xfce will be used
systemctl enable NetworkManager

## Enable GDM
systemctl enable gdm.service

## Enable Bluetooth user interface (different from turning bluetooth on)
## Currently disabled: it can be enabled by starting the bluetooth program
#systemctl enable bluetooth

## Don't show Mail Reader menu link
mkdir -p /usr/share/applications
cp /usr/local/aok/files/exo-mail-reader.desktop \
    /usr/share/applications || echo -n

## Remove old packages
pacman --noconfirm -Sc || echo -n

## Now that that's all done, restore the default login prompt
## (Remove the AOK setup welcome message)
echo "Arch Linux \r (\l)" > /etc/issue
echo >> /etc/issue


## Uninstall setup files
rm /usr/local/bin/setup || echo -n
rm /root/.aok-offline-setup-done.temp || echo -n

## Exit message
echo
echo "Done."
echo

YELLOW='\033[1;33m' # Light Yellow
NC='\033[0m' # No Color
printf "Upon boot press ${YELLOW}ctrl${NC}+${YELLOW}u${NC} to boot USB/SD, or ctrl+d to boot Internal Storage.\n"
echo
## REBOOT TO LOAD UPGRADED KERNEL, ETC
read -p "Press enter to reboot"
reboot

