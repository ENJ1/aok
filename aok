#!/bin/bash -e

## This script depends on files in the directory "/home/chronos/user/Downloads/aok-master"
## Or at least files in the directory "/usr/local/aok"

tools_check () {
echo "Checking tools..."
if [ "$EUID" != 0 ]; then
  echo "Root privilege not found, quitting."
  exit 1
fi
## Copy aok files. Remove outdated ones if necessary.
if [ -d "/home/chronos/user/Downloads/aok-master" ]; then
  if [ -d "/usr/local/aok" ]; then
    echo "Removing old aok scripts..."
    cd /usr/local/aok
    rm * 2> /dev/null || echo -n
    rm -rf extra files 2> /dev/null || echo -n
    ## Leave distro folder, it may contain ~443MB file that may still be good
    cd -
    echo "Old aok script removal complete."
  fi
  cp -r /home/chronos/user/Downloads/aok-master/. /usr/local/aok
fi
cd /usr/local/aok
## Check for vboot-utils and more
crossystem hwid && echo || echo "crossystem not found. OK."
curl -V > /dev/null || { echo "curl not found. exiting."; exit 1; }
ping -c 1 archlinuxarm.org > /dev/null \
  || echo "archlinuxarm.org not found. May use local data."
md5sum --version > /dev/null || { echo "md5sum not found. exiting."; exit 1; }
umount -V > /dev/null || { echo "umount not found. exiting."; exit 1; }
fdisk -V
cgpt add -h > /dev/null || { echo "cgpt not found. exiting."; exit 1; }
mkfs -V > /dev/null || { echo "mkfs not found. exiting."; exit 1; }
dd --version > /dev/null || { echo "dd not found. exiting."; exit 1; }
echo "Tools check complete."
}

## Test mirrors and hopefully create bestmirrors.txt
test_mirrors () {
echo "Testing mirrors..."
## Create or reset the working mirrors list file, and set local mirror status
echo -n > workingmirrors.txt.temp
LOCAL_MIRROR_SUCCESS=false
## All local Arch Linux ARM mirrors, not the main load-balancing mirror
## This is the list from https://archlinuxarm.org/about/mirrors
## Plus the list provided in /etc/pacman.d/mirrorlist
all_Mirrors=(au br2 dk de3 de de4 de5 de6 eu gr hu nl ru sg za tw ca.us nj.us fl.us il.us vn)
## Try to download md5 file for each mirror, recording speeds
for SUBDOMAIN in ${all_Mirrors[@]}; do
  ## Download md5, and save Current Speed from curl progress meter
  ## A higher number is better. Domains that fail will have a null value.
  CURRENT_SPEED=`curl --max-time 5 -LO \
  ${SUBDOMAIN}.mirror.archlinuxarm.org/os/ArchLinuxARM-armv7-chromebook-latest.tar.gz.md5 \
  2>&1 | grep $'\r100' | grep -o '[^ ]*$' || echo -n`
  ## What if it's a bad md5 file, like a 404?
  ## It should contain the filename, and be only 1 line
  if [ `grep ArchLinuxARM-armv7-chromebook-latest.tar.gz \
      ArchLinuxARM-armv7-chromebook-latest.tar.gz.md5 | wc -l` -eq 1 ]; then
    ## Save the working mirror to a text file, Format: Speed (tab) Mirror
    if [ -n "$CURRENT_SPEED" ]; then
      echo -e "${CURRENT_SPEED}\t${SUBDOMAIN}.mirror.archlinuxarm.org" \
        | tee -a workingmirrors.txt.temp
      ## Save the best md5
      cp -u ArchLinuxARM-armv7-chromebook-latest.tar.gz.md5 \
          ArchLinuxARM-armv7-chromebook-latest.tar.gz.md5.temp
      MIRROR_SUCCESS=true
      LOCAL_MIRROR_SUCCESS=true
    else
      echo -e "\t${SUBDOMAIN}.mirror.archlinuxarm.org failed completely"
    fi
  else
    echo -e "\t${SUBDOMAIN}.mirror.archlinuxarm.org did not provide the correct file (Likely 404)"
    ## Restore the real (and best) md5 if one exists
    cp ArchLinuxARM-armv7-chromebook-latest.tar.gz.md5.temp \
        ArchLinuxARM-armv7-chromebook-latest.tar.gz.md5 || echo -n
  fi
done
if [ "$LOCAL_MIRROR_SUCCESS" = true ]; then
  echo
  echo "These are your current best mirrors:"
  echo -e "SPEED\tMIRROR"

  ## Sort human readable reverse (highest first) to a sorted file
  cat workingmirrors.txt.temp | sort -hr | tee bestmirrors.txt
else
  echo
  echo "No working local mirrors found."
fi
## Cleanup
rm -f ArchLinuxARM-armv7-chromebook-latest.tar.gz.md5.temp
rm -f workingmirrors.txt.temp
echo "Mirrors testing complete."
echo "Do NOT click on Chrome OS pop-up messages when they appear!"
}

## Offline function, try using local md5 or quit
use_local_md5 () {
  if [ -f ArchLinuxARM-armv7-chromebook-latest.tar.gz.md5 ]; then
    echo "Using existing local md5 file."
  else
    echo "Cannot find md5 file. exiting. Check your Internet connection."
    exit 1
  fi
}

install_arch () {
echo "Preparing files..."
mkdir -p distro
cd distro
## Check if Internet and DNS is working before trying every mirror
## curl is built without metalink support in Chrome OS.
## it's a small file, so be impatient
MIRROR_SUCCESS=false
if ping -c 1 archlinuxarm.org > /dev/null; then
  curl --max-time 10 -LO \
      mirror.archlinuxarm.org/os/ArchLinuxARM-armv7-chromebook-latest.tar.gz.md5 && {
        cp -u ArchLinuxARM-armv7-chromebook-latest.tar.gz.md5 \
            ArchLinuxARM-armv7-chromebook-latest.tar.gz.md5.temp
        MIRROR_SUCCESS=true
      } || echo -n
  test_mirrors
  if [ "$MIRROR_SUCCESS" = false ]; then
    echo "Cannot download latest md5: all mirrors failed."
    use_local_md5
  fi
else
    echo "Cannot download latest md5: archlinuxarm.org not found."
    use_local_md5
fi
## Check even if it doesn't exist, or try downloading
md5sum -c ArchLinuxARM-armv7-chromebook-latest.tar.gz.md5 --status || {
  echo "Attempting download..."
  if ping -c 1 archlinuxarm.org > /dev/null; then
    ## Here's where to use the fastest mirror from testing
    DOWNLOADED=false
    DL=1
    MAX_MIRRORS=`cat bestmirrors.txt | wc -l`
    while [ "$DL" -le "$MAX_MIRRORS" ]; do
      TRY_MIRROR=`sed -n "${DL}p" bestmirrors.txt | sed $'s/.*\t//'`
      curl -LO ${TRY_MIRROR}/os/ArchLinuxARM-armv7-chromebook-latest.tar.gz \
          && {
            DOWNLOADED=true
            break
          } ||
          DL=$[$DL+1]
    done
    if [ "$DOWNLOADED" = false ]; then
      ## Try the main load-balanced mirror as a last resort
      curl -LO mirror.archlinuxarm.org/os/ArchLinuxARM-armv7-chromebook-latest.tar.gz \
        || {
          echo "Couldn't download Arch Linux. Check your Internet connection reliability."
          exit 1
        }
    fi
    echo "Download complete."
    md5sum -c ArchLinuxARM-armv7-chromebook-latest.tar.gz.md5 || {
      echo "The Arch Linux download was corrupted. You may want to try again."
      exit 1
    }
  else
    echo "Arch Linux local copy unavailable. Can't download: Not online. Exiting."
    exit 1
  fi
}
cd -
echo "File preparation complete."
## Now that everything is ready, truly get started
echo "Starting Arch Linux Installation..."
umount ${DEVICE}* 2> /dev/null || echo -n

## Automate fdisk. I know sgdisk is preferred for scripting, but
## This is done so you can understand it, learn from it, and use
## it yourself if you want to.
## Do not change the whitespace here, it is very important
## passing "y" in case it asks if sure. harmless if not asked.
{ fdisk ${DEVICE} << "END"
g
n


+16M
y
t
FE3A2A5D-4F32-41A7-B725-ACCC3285A309
n



p
w
END
} 2> /dev/null || {
  echo "fdisk was unable to re-read partition table. Using partx to solve..."
}

## Updating partition info, regardless of whether it's necessary or not
partx -u ${DEVICE}

## Set special flags needed by U-Boot.
## or echo -n. Don't let so-called-cgpt-errors break the script
cgpt add -i 1 -P 10 -T 5 -S 1 ${DEVICE} || echo -n

## Extra umounting, just in case
umount ${DEVICE}* 2> /dev/null || echo -n
umount rootfs 2> /dev/null || echo -n

## Make filesystem
## Avoid mkfs complaining that it's 'apparently in use by the system' but isn't (-F -F)
mkfs.ext4 -F -F ${DEVICE}${PARTITION_2}

## Updating partition info, regardless of whether it's necessary or not
partx -u ${DEVICE}

## Copy files
mkdir -p rootfs
mount ${DEVICE}${PARTITION_2} rootfs
echo "Copying Filesystem..."
tar --warning=no-unknown-keyword -xf \
distro/ArchLinuxARM-armv7-chromebook-latest.tar.gz -C rootfs --checkpoint=.500
echo
echo "Filesystem copy complete."
echo "Copying Boot Partition..."
dd if=rootfs/boot/vmlinux.kpart of=${DEVICE}${PARTITION_1} status=progress
echo "Boot Partition copy complete."

## If on ChromeOS then enable booting
crossystem dev_boot_usb=1 dev_boot_signed_only=0 || echo -n

## Don't let kernel messages garble the console; hide them instead.
mkdir -p rootfs/etc/sysctl.d
echo "kernel.printk = 3 3 3 3" >> rootfs/etc/sysctl.d/20-quiet-printk.conf

## Add best mirrors to pacman mirrorlist
if [ -f distro/bestmirrors.txt ]; then
  ADD=1
  MAX_MIRRORS=`cat distro/bestmirrors.txt | wc -l`
  echo >> rootfs/etc/pacman.d/mirrorlist
  echo "## Automatically added mirrors from AOK mirror testing" \
      >> rootfs/etc/pacman.d/mirrorlist
  while [ "$ADD" -le "$MAX_MIRRORS" ]; do
    APPEND=`sed -n "${ADD}p" distro/bestmirrors.txt | sed $'s/.*\t//'`
    echo 'Server = http://'${APPEND}'/$arch/$repo' \
        >> usemirrors.txt
    ADD=$[$ADD+1]
  done
  ## append those mirrors to the TOP of the mirrorlist
  cat usemirrors.txt rootfs/etc/pacman.d/mirrorlist > temp && mv temp rootfs/etc/pacman.d/mirrorlist
fi

## Bulk copy of custom content (will ALSO install in specific places)

## Install aok, setup, dim, and anything else
mkdir -p rootfs/usr/local/bin
install aok rootfs/usr/local/bin
install setup rootfs/usr/local/bin
install extra/dim rootfs/usr/local/bin
install extra/*.sh rootfs/usr/local/bin

## Copy everything except distro to aok folder
mkdir -p rootfs/usr/local/aok
install aok rootfs/usr/local/aok
install setup rootfs/usr/local/aok
cp -r files rootfs/usr/local/aok
cp -r extra rootfs/usr/local/aok
chmod +x rootfs/usr/local/aok/extra/dim
chmod +x rootfs/usr/local/aok/extra/*.sh

## ALSO, copy files to specific locations

## Copy quiet background for Xfce
mkdir -p rootfs/usr/share/backgrounds/xfce
cp files/bright_background_light_texture_50370_1366x768.jpg \
    rootfs/usr/share/backgrounds/xfce
    
## Copy Arch Linux icon for Xfce menu
mkdir -p rootfs/usr/share/icons
cp files/arch_linux_gnome_menu_icon_by_byamato.png rootfs/usr/share/icons

## Copy background for lightdm
mkdir -p rootfs/usr/share/pixmaps
cp files/linux_archlinux_os_blue_black_logo_30861_1366x768.jpg rootfs/usr/share/pixmaps

## Copy lightdm config
mkdir -p rootfs/etc/lightdm
cp files/lightdm-gtk-greeter.conf rootfs/etc/lightdm

## ALSO, Copy Global Xfce pre-configs

## Copy desktop, panel, power settings
mkdir -p rootfs/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cp files/xfce4-desktop.xml \
    rootfs/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cp files/xfce4-panel.xml \
    rootfs/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cp files/xfce4-power-manager.xml \
    rootfs/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml

## Copy firefox launcher
mkdir -p rootfs/etc/skel/.config/xfce4/panel/launcher-8
cp files/15745773551.desktop \
    rootfs/etc/skel/.config/xfce4/panel/launcher-8

## Create a welcome message with instructions
cat << "EOF" >> rootfs/etc/issue
Welcome. To finish installing AOK, do the following:
1. Login. The username is "root", and the default password is "root".
2. After logging in, type "setup" and press enter.

EOF
## Finish up
umount rootfs
sync
rmdir rootfs
echo
echo "Arch Linux Installation is complete."
echo
echo "Would you also like to copy the Arch Linux Distro for future installs?"
read -p "(y/N) > " FUTURE
case "$FUTURE" in
  y|Y)
    echo "Copying distro..."
    mkdir rootfs
    mount ${DEVICE}${PARTITION_2} rootfs
    rsync -ah --info=progress2 distro /rootfs/root
    umount rootfs
    sync
    rmdir rootfs
    echo "Distro copied."
    ;;
  *)
    echo
    ;;
esac
echo "Done."
echo
echo "To boot from USB on a Samsung XE303C12, make sure the USB drive is in the black USB 2.0 Port"
echo
echo "Reboot and press CTRL-U to boot USB or SD Card, or CTRL-D to boot Internal Storage."
echo
echo "Would you like to reboot now? (Y/n)"
read -p "> " REBOOT
case "$REBOOT" in
  n|N|no|No|NO|nO)
      ;;
  *)
      echo "Rebooting..."
      reboot
      ;;
esac
}

lsblk
echo
echo "Select the device where you would like to install Arch Linux:"
echo 
echo "0) Laptop (/dev/mmcblk0). Do not run this from ChromeOS"
echo "1) SD Card (/dev/mmcblk1)"
echo "a) USB Stick (/dev/sda). Some USB Sticks work, some don't"
echo "b) Second USB Stick or VirtualBox SD Card (/dev/sdb)"
echo "q) Quit without making changes"
echo
read -p "> " CHOICE
case "$CHOICE" in
  0)
    DEVICE='/dev/mmcblk0'
    PARTITION_1='p1'
    PARTITION_2='p2'
    tools_check
    install_arch
    ;;
  1)
    DEVICE='/dev/mmcblk1'
    PARTITION_1='p1'
    PARTITION_2='p2'
    tools_check
    install_arch
    ;;
  a)
    DEVICE='/dev/sda'
    PARTITION_1='1'
    PARTITION_2='2'
    tools_check
    install_arch
    ;;
  b)
    DEVICE='/dev/sdb'
    PARTITION_1='1'
    PARTITION_2='2'
    tools_check
    install_arch
    ;;
  *)
    echo "No changes made, quitting."
    ;;
esac
